<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Creating a Simple Service</title>
  <para>This chapter will walk the user through creating a simple 
  HelloWorld service.  By the end of the chapter, the user will have 
  gone through the necessary steps to create and test a turmeric soa 
  service capable of supporting JSON, XML, Name Value Pair, and SOAP 
  1.1 and 1.2 formats.</para>
  <section>
    <title>Creating a Service</title>
    <para>To create a Turmeric service, use the Service Creation 
    wizard:</para>
    <procedure>
      <title>Creating an initial service</title>
      <step>
        <para>Switch to the Turmeric Development perspective: 
        <emphasis>Windows-&gt;Open Perspective-&gt;Other-&gt;Turmeric 
        SOA</emphasis>.</para>
      </step>
      <step>
        <para>Navigate to <emphasis>File-&gt;New-&gt;Service (from 
        WSDL)</emphasis> menu.</para>
      </step>
      <step>
        <para>Click <emphasis>Template WSDL</emphasis>. Then the 
        <emphasis>New Service From Template WSDL</emphasis> dialog box 
        opens.</para>
      </step>
      <step>
        <para>Change the <emphasis>Domain Name</emphasis> to 
        <emphasis role="bold">Demo</emphasis></para>
      </step>
      <step>
        <para>If necessary, change the <emphasis>Target 
        Namespace</emphasis> from 
        <ulink url="http://www.ebayopensource.org/turmeric/sample_namespacepart/v1/services">
        http://www.ebayopensource.org/turmeric/sample_namespacepart/v1/services</ulink> 
        to 
        <ulink url="http://www.ebayopensource.org/turmeric/demo/v1/services">
        http://www.ebayopensource.org/turmeric/demo/v1/services</ulink>.</para>
      </step>
      <step>
        <para>Change the <emphasis>Service Name</emphasis> to 
        <emphasis>DemoHelloWorldService</emphasis>.</para>
      </step>
      <step>
        <para>If necessary, change the <emphasis>Admin Name</emphasis> 
        from <emphasis>Sample_NamespaceHelloWorderviceV1</emphasis> to 
        <emphasis>DemoHelloWorldServiceV1</emphasis>.</para>
      </step>
      <step>
        <para>Click <emphasis>Next</emphasis>.</para>
      </step>
    </procedure>
    <procedure>
      <title>Add a <emphasis>hello</emphasis> operation</title>
      <step>
        <para>Press the <emphasis>Add Operation</emphasis> button</para>
      </step>
      <step>
        <para>Select the newly added operation 
        <emphasis>newOperation</emphasis>, and change it to 
        <emphasis>hello</emphasis>.</para>
      </step>
      <step>
        <para>Click <emphasis>helloRequest</emphasis> and add an 
        element called <emphasis>helloText</emphasis>.</para>
        <substeps>
          <step>
            <para>Click the <emphasis>Add</emphasis> button.</para>
          </step>
          <step>
            <para>Change the element name to 
            <emphasis>helloText</emphasis>.</para>
          </step>
          <step>
            <para>Click <emphasis>Finish</emphasis>.</para>
          </step>
        </substeps>
      </step>
      <step>
        <para>Click <emphasis>helloResponse</emphasis> and add an 
        element called <emphasis>hi</emphasis>.</para>
        <substeps>
          <step>
            <para>Change the output element to 
            <emphasis>hi</emphasis>.</para>
          </step>
          <step>
            <para>Click <emphasis>Finish</emphasis>.</para>
          </step>
        </substeps>
      </step>
    </procedure>
    <para>This generates two projects in your workspace: 
    <emphasis>DemoHelloWorldServiceV1</emphasis> and 
    <emphasis>DemoHelloWorldServiceV1Impl</emphasis>.</para>
    <para>One additional step that needs to occur after the project is 
    created is to comment out an option in the DemoHelloWorldServiceV1 
    project&apos;s service_intf_project.properties file.</para>
    <procedure>
      <title>Update the Service Interface Properties file.</title>
      <tip>
        <para>This step is only needed if you are using Turmeric SOA 
        1.1.0. Versions prior to this do not have Protobuf support. 
        Future versions of Turmeric SOA will have this option disabled 
        by default.</para>
      </tip>
      <step>
        <para>
          Locate the following line:
          <programlisting>nonXSDFormats=protobuf</programlisting>
        </para>
      </step>
      <step>
        <para>Comment out the line:</para>
        <programlisting>#nonXSDFormats=protobuf</programlisting>
      </step>
      <step>
        <para>Save the file.</para>
      </step>
    </procedure>
    <para>Protobuf support was added in Turmeric SOA 1.1.0, however 
    certain WSDL structures are not compatible with Protobuf so for 
    this tutorial we disable protobuf support.</para>
    <section>
      <title>Implementing the Service</title>
      <para>Now that the service has been created how do we make it do 
      something useful. Turmeric SOA generates for you the necessary 
      Data Binding classes, and a stub for the service implementation. 
      It also generates for you some classes needed to use a Turmeric 
      SOA Consumer or Handler project. However working with Handlers 
      and Consumers is out of scope for this article.</para>
      <para>In the HelloWorldServiceV1Impl project, there is a src 
      folder that contains the following class DemoHelloWorldV1Impl. 
      We&apos;ll be adding our implementation code to this class.</para>
      <procedure>
        <title>Implementing the DemoHelloWorldServiceImpl class.</title>
        <step>
          <para>Open the DemoHelloWorldV1Impl in the Java Editor.</para>
        </step>
        <step>
          <para>Locate the hello method, and change the method to the 
          following.</para>
          <programlisting lang="java">public HelloResponse hello(HelloRequest request) {
    HelloResponse response = new HelloResponse();
    String rsp = &quot;Hi, &quot; + request.getHelloText();
    response.setHi(rsp);
    return response;
} </programlisting>
        </step>
        <step>
          <para>Save the file.</para>
        </step>
      </procedure>
      <para>The code above will take the text that has been sent in as 
      part of the hello operation request, and output a response. For 
      example if helloText contains, Turmeric, the response would be 
      set in the hi element as &quot;Hi, Turmeric&quot;.</para>
    </section>
  </section>
  <section>
    <title>Testing the Service</title>
    <para>There are many different ways to test the web service. One of 
    the simpliest ways is to use the jetty-maven-plugin to launch the 
    newly created service and then use your Web Browser.</para>
    <section>
      <title>Creating a Maven WebApp Project</title>
      <para>We will be testing the DemoHelloWorldV1Impl service we 
      implemented in the prior section. To do this we will be creating 
      a new project that is a Maven WebApp.</para>
      <procedure>
        <title>Create a Maven WebApp Project</title>
        <step>
          <para>Select <emphasis>File-&gt;New-&gt;Project-&gt;Maven 
          Project</emphasis>.</para>
        </step>
        <step>
          <para>Press <emphasis>Next</emphasis>.</para>
        </step>
        <step>
          <para>In the <emphasis>Maven Archetype</emphasis> selection 
          box, select the <emphasis>maven-archetype-webapp</emphasis> 
          and press Next.</para>
        </step>
        <step>
          <para>Enter the groupId: 
          <emphasis>com.example.demo</emphasis></para>
        </step>
        <step>
          <para>Enter the artifactId: 
          <emphasis>test-hello-world</emphasis></para>
        </step>
        <step>
          <para>Change the version to 
          <emphasis>1.0.0-SNAPSHOT</emphasis></para>
        </step>
        <step>
          <para>Press <emphasis>Finish</emphasis>.</para>
        </step>
      </procedure>
      <para>This will create a new project in your workspace called 
      <emphasis>test-hello-world</emphasis>. It will be setup for a 
      basic web project, and if <emphasis>mvn clean install</emphasis> 
      is run the project will build a war file. Next we need to update 
      the generated web.xml with some information and add a dependency 
      to the DemoHelloWorldV1Impl project.</para>
    </section>
    <section>
      <title>Creating the Service WAR</title>
      <para>The web.xml contains the necessary entries to allow the web 
      service to respond to requests. Once the web.xml file has been 
      copied over into the test-hello-world project, we need to setup 
      the project so that we can use the jetty-maven-plugin to run the 
      service.</para>
      <procedure>
        <title>Update the web.xml, Add Dependencicies, and 
        jetty-mave-plugin</title>
        <step>
          <para>From the <emphasis>DemoHelloWorldV1Impl</emphasis> 
          project copy the <emphasis>web.xml</emphasis> file from 
          <emphasis>gen-src-webapp/WEB-INF</emphasis> to 
          <emphasis>test-hello-world/src/main/webapp/WEB-INF</emphasis>. 
          You will replace the existing web.xml that resides in the 
          destination directory.</para>
        </step>
        <step>
          <para>Edit the test-hello-world pom.xml file using the pom 
          editor.</para>
        </step>
        <step>
          <para>Select the XML tab in the pom editor to bring up the 
          XML source editor for the pom.</para>
        </step>
        <step>
          <para>Add the DemoHelloWorldV1Impl project as a dependency in 
          the pom:</para>
          <programlisting lang="xml">&lt;dependency&gt;
  &lt;groupId&gt;org.ebayopensource.turmeric.impl&lt;/groupId&gt;
  &lt;artifactId&gt;DemoHelloWorldV1Impl&lt;/artifactId&gt;
  &lt;version&gt;1.0.0&lt;/version&gt;
&lt;/dependency&gt;
</programlisting>
          <para>Add the above after the entry for junit that occurs in 
          the pom.</para>
        </step>
        <step>
          <para>Next we need to add some information for the version of 
          the jetty-maven-plugin we want to use. In this case 
          we&apos;ll use version 7.5.4.v20111024 which is the most 
          current at this time. Add the following to the build 
          element.</para>
          <programlisting lang="xml">&lt;plugins&gt;
   &lt;plugin&gt;
     &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
     &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
     &lt;version&gt;7.5.4.v20111024&lt;/version&gt;
   &lt;/plugin&gt;
&lt;/plugins&gt;</programlisting>
        </step>
        <step>
          <para>Save the pom.</para>
        </step>
      </procedure>
    </section>
    <section>
      <title>Installing the Service to the Maven Repository</title>
      <para>The next to last item we have to do is make sure the 
      DemoHelloWorldV1 and DemoHelloWorldV1Impl projects are installed 
      into the local maven repository. Otherwise when the 
      jetty-maven-plugin runs it can not locate the necessary 
      files.</para>
      <procedure>
        <title>Install DemoHelloWorldV1 and DemoHelloWorldV1Impl</title>
        <step>
          <para>Select the project&apos;s pom.xml file.</para>
        </step>
        <step>
          <para>Right mouse click and select Run As-&gt;Maven 
          Install.</para>
        </step>
        <step>
          <para>Repeat the steps for the remaining project.</para>
        </step>
      </procedure>
    </section>
    <section>
      <title>Testing the Service</title>
      <para>The final step is to actually build the WAR, launch the 
      service for testing, and test it using your favorite web 
      browser.</para>
      <procedure>
        <title>Launching and Testing the Service</title>
        <step>
          <para>Right click on the 
          <emphasis>test-hello-world/pom.xml</emphasis>.</para>
        </step>
        <step>
          <para>Select <emphasis>Run-As-&gt;Maven build</emphasis>. If 
          this is the first time the build has run a Launch 
          configuration will open and follow the next steps.</para>
        </step>
        <step>
          <para>For the build goals enter: 
          <emphasis>jetty:run-war</emphasis></para>
        </step>
        <step>
          <para>Press <emphasis>RUN</emphasis> to save the 
          configuration and run it.</para>
          <para>This will launch a Maven Build, and build the war file. 
          It will then start the Jetty application server running on 
          Port 8080. Once the application server has been started the 
          console View will indicate that Jetty has Started.</para>
        </step>
        <step>
          <para>Open your web browser and enter the following url then 
          press enter: 
          <ulink url="http://localhost:8080/DemoHelloWorldV1Impl?wsdl">
          http://localhost:8080/DemoHelloWorldV1Impl?wsdl</ulink></para>
          <para>The service will display the WSDL that it is based 
          against.</para>
        </step>
        <step>
          <para>If the prior step worked, we can test our service 
          implementation. By default the service returns XML format for 
          the response. Enter the following url to have the server say, 
          &quot;Hi, Turmeric&quot;. 
          <ulink url="http://localhost:8080/DemoHelloWorldV1Impl?X-TURMERIC-OPERATION-NAME=hello&amp;helloText=Turmeric">
          http://localhost:8080/DemoHelloWorldV1Impl?X-TURMERIC-OPERATION-NAME=hello&amp;helloText=Turmeric</ulink></para>
          <para>A response should be returned that looks similar to the 
          following:</para>
          <programlisting lang="xml">&lt;helloResponse&gt;
   &lt;hi&gt;Hi, Turmeric&lt;/hi&gt;
&lt;/helloResponse&gt;</programlisting>
        </step>
        <step>
          <para>The service can also return JSON formatted responses, 
          simply change the url to the following:</para>
          <para>
          <ulink url="http://localhost:8080/DemoHelloWorldV1Impl?X-TURMERIC-OPERATION-NAME=hello&amp;X-TURMERIC-RESPONSE-DATA-FORMAT=JSON&amp;helloText=Turmeric">http://localhost:8080/DemoHelloWorldV1Impl?X-TURMERIC-OPERATION-NAME=hello&amp;X-TURMERIC-RESPONSE-DATA-FORMAT=JSON&amp;helloText=Turmeric</ulink></para>
          <para>A response will be returned that looks like the 
          following:</para>
          <programlisting lang="javascript">{&quot;helloResponse&quot;:{&quot;hi&quot;:&quot;Hi, Turmeric&quot;}}</programlisting>
        </step>
      </procedure>
      <para>Congratulations you have successfully created a web service 
      that understands XML and JSON data formats.</para>
    </section>
  </section>
</chapter>
